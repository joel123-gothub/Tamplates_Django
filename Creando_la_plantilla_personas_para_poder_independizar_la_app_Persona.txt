
C:\Users\lucien>D:

D:\>cd ING.SISTEMAS\Python\src


D:\ING.SISTEMAS\python\src>dir
 El volumen de la unidad D es Data
 El número de serie del volumen es: 78D8-4DF8

 Directorio de D:\ING.SISTEMAS\python\src

21/06/2020  19:19    <DIR>          .
21/06/2020  19:19    <DIR>          ..
01/06/2020  11:59               549 bibliografia.txt
01/06/2020  11:50               629 consulta.html
01/06/2020  11:38               513 consulta.py
21/06/2020  18:21           139.264 db.sqlite3
25/05/2020  12:43               108 hola.py
21/06/2020  18:59    <DIR>          inicio
21/06/2020  16:47               648 manage.py
08/06/2020  16:30    <DIR>          personas
08/06/2020  15:53    <DIR>          primero
08/06/2020  15:25    <DIR>          project-prueba
21/06/2020  19:55    <DIR>          templates
               6 archivos        141.711 bytes
               7 dirs  241.935.110.144 bytes libres
 
D:\ING.SISTEMAS\python\src>project-prueba\Scripts\activate.bat

//enviando variables desde vistas.py mediante funcion render.

(project-prueba) D:\ING.SISTEMAS\python\src>vim inicio\views.py

//posicionando las variables

(project-prueba) D:\ING.SISTEMAS\python\src>vim templates\home.html

//utilizando el tag: for

(project-prueba) D:\ING.SISTEMAS\python\src>vim inicio\views.py
git
//inicializando for en home.html

(project-prueba) D:\ING.SISTEMAS\python\src>vim templates\home.html

// utilizando el forloop:counter

// viendo en home.html

<!DOCTYPE html>
<html>
    <head>
        <title>Template Base</title>
    </head>
    <body>
        {% extends 'base.html' %}
        {% block content %}
        <h1>Hola Mundo desde Django</h1>
        <h2>Con Templates</h2>
        <p>
            {{myText}},
            {{myNumber}}
        </p>
        <ul>
            {% for myItem in myList %}
            <li>{{ forloop.counter }} - {{ myItem }}</li>
            {% endfor %}
            <p>De otra manera:</p>
            {% for myItem in myList %}
            <li>{{ forloop.counter0 }} - {{ myItem }}</li>
            {% endfor %}
        </ul>
        {% endblock %}
    </body>
// </html>


Utilizando el tag:if en myList

(project-prueba) D:\ING.SISTEMAS\python\src>vim templates\home.html

<!DOCTYPE html>
<html>
    <head>
        <title>Template Base</title>
    </head>
    <body>
        {% extends 'base.html' %}
        {% block content %}
        <h1>Hola Mundo desde Django</h1>
        <h2>Con Templates</h2>
        <p>
            {{myText|upper}},
            {{myNumber}}
        </p>
        <ul>
            {% for myItem in myList %}
            <li>{{ forloop.counter }} - {{ myItem }}</li>
            {% endfor %}
            <p>De otra manera:</p>
            {% for myItem in myList %}
            <li>{{ forloop.counter0 }} - {{ myItem }}
                {% if myItem == 19 %}
                - Es hoy, es hoy, es hoy :).     
                {% elif myItem < 19 %}
                - Aun debo esperar :'(.
                {% elif myItem > 19 %}
                - Al otro año sera nomas :'(.
            {% endif %}
            </li>
            {% endfor %}
        </ul>
        {% endblock %}
    </body>
</html>

//probando el filtro upper, center, add 
(project-prueba) D:\ING.SISTEMAS\python\src>vim templates\home.html

<!DOCTYPE html>
<html>
    <head>
        <title>Template Base</title>
    </head>
    <body>
        {% extends 'base.html' %}
        {% block content %}
        <h1>Hola Mundo desde Django</h1>
        <h2>Con Templates</h2>
        <p>
	    {{myText|upper|truncatechars:"16"}},
            {{myNumber|center:"20"}},<br>
            mes = {{ mes|add:"2"}} - 2 = 07
        </p>
        <ul>
            {% for myItem in myList %}
            <li>{{ forloop.counter }} - {{ myItem|add:2 }}</li>
            {% endfor %}
            <p>De otra manera:</p>
            {% for myItem in myList %}
            <li>{{ forloop.counter0 }} - {{ myItem }}
                {% if myItem == 19 %}
                - Es hoy, es hoy, es hoy :).     
                {% elif myItem|divisibleby:2 %}
                - Este es divisible :'(.
                {% elif myItem > 19 %}
                - Al otro año sera nomas :'(.
                {% else %}
                - Aun debo esperar :'(
            {% endif %}
            </li>
            {% endfor %}
        </ul>
        {% endblock %}
    </body>
</html>

(project-prueba) D:\ING.SISTEMAS\python\src>python manage.py shell
Python 3.8.3 (tags/v3.8.3:6f8c832, May 13 2020, 22:37:02) [MSC v.1924 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from personas.models import Persona
>>> Persona.objects.all()
<QuerySet [<Persona: Persona object (1)>]>
>>> obj = Persona.objects.get( id= 1)
>>> dir(obj)
['DoesNotExist', 'MultipleObjectsReturned', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_check_column_name_clashes', '_check_constraints', '_check_field_name_clashes', '_check_fields', '_check_id_field', '_check_index_together', '_check_indexes', '_check_local_fields', '_check_long_column_names', '_check_m2m_through_same_relationship', '_check_managers', '_check_model', '_check_model_name_db_lookup_clashes', '_check_ordering', '_check_property_name_related_field_accessor_clashes', '_check_single_primary_key', '_check_swappable', '_check_unique_together', '_do_insert', '_do_update', '_get_FIELD_display', '_get_next_or_previous_by_FIELD', '_get_next_or_previous_in_order', '_get_pk_val', '_get_unique_checks', '_meta', '_perform_date_checks', '_perform_unique_checks', '_save_parents', '_save_table', '_set_pk_val', '_state', 'apellidos', 'check', 'clean', 'clean_fields', 'date_error_message', 'delete', 'edad', 'from_db', 'full_clean', 'get_deferred_fields', 'id', 'nombre', 'objects', 'pk', 'prepare_database_save', 'refresh_from_db', 'save', 'save_base', 'serializable_value', 'unique_error_message', 'validate_unique']
>>> exit()

(project-prueba) D:\ING.SISTEMAS\python\src>vim personas\views.py

+from django.shortcuts import render
+from .models import Persona

# Create your views here.
+def personaTestView(request):
+   obj = Persona.objects.get(id = 2)
+    context ={
+       'objeto' : obj,
+    }
+    return render(request, 'personas/test.html', context)

(project-prueba) D:\ING.SISTEMAS\python\src>mkdir templates\personas
(project-prueba) D:\ING.SISTEMAS\python\src>vim templates\personas\test.html
/*
<!DOCTYPE html>
<html>
    <head>
        <title>Test render</title>
    </head>
    <body>
        {% extends 'base.html' %}

        {% block content %}
        <h1>{{ objeto.nombre }}</h1>
        <h2>
            {% if objeto.edad > 40 %}
            debe cuidarse del colesterol.
            {% else %}
            puede comer lo que quiera.
            {% endif %}
        </h2>
        {% endblock %}
    </body>
</html>
*/
(project-prueba) D:\ING.SISTEMAS\python\src>vim primero\urls.py

/*
from django.contrib import admin
from django.urls import path
from inicio.views import myHomeView
from inicio.views import anotherView
from personas.views import personaTestView


urlpatterns = [
    path('', myHomeView, name='Pagina de Inicio'),
    path('another/', anotherView, name='otro'),
    path('admin/', admin.site.urls),
    path('persona/', personaTestView, name='otros'),
]

*/

(project-prueba) D:\ING.SISTEMAS\python\src>mkdir personas\templates
(project-prueba) D:\ING.SISTEMAS\python\src>move templates\personas personas\templates
Se ha(n) movido         1 directorio(s).

(project-prueba) D:\ING.SISTEMAS\python\src>move personas\templates\personas\test.html personas\templates\personas\descripcion.html
Se han movido         1 archivos.

(project-prueba) D:\ING.SISTEMAS\python\src>vim personas\views.py
/*
from django.shortcuts import render
from .models import Persona

# Create your views here.
def personaTestView(request):
    obj = Persona.objects.get(id = 2)
    context ={
        'objeto' : obj,
    }
    return render(request, 'personas/descripcion.html', context)
*/

